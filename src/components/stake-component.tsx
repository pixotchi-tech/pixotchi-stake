'use client';
/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/gn1uZlGlwG5
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
import Link from "next/link"
import { Button } from "@/components/ui/button"
import { Card, CardHeader, CardTitle, CardDescription, CardContent } from "@/components/ui/card"
import { Label } from "@/components/ui/label"
import { Input } from "@/components/ui/input"
import {usePrivy, useWallets} from "@privy-io/react-auth";
import {useAccount, useDisconnect} from "wagmi";
import {useSetActiveWallet} from "@privy-io/wagmi";
import { useReadErc20, useReadErc20Allowance, useReadErc20BalanceOf, useWriteErc20Approve } from '../generated';
import { formatEther, parseEther } from "viem"; // Add this import for formatting
import { useState } from "react";
import { useWriteStakeContractStake } from '../generated';
import { useQueryClient } from '@tanstack/react-query';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert"
import { ExclamationTriangleIcon } from "@radix-ui/react-icons"
import { getWalletClient, waitForTransactionReceipt } from '@wagmi/core'
import {wagmiConfig} from "@/app/providers";


// Add these constants for token addresses (replace with actual addresses)
const SEED_TOKEN_ADDRESS = process.env.NEXT_PUBLIC_SEED_TOKEN!;
const LEAF_TOKEN_ADDRESS = process.env.NEXT_PUBLIC_LEAF_TOKEN!;
const STAKING_CONTRACT_ADDRESS = process.env.NEXT_PUBLIC_STAKING_CONTRACT;

export function StakeComponent() {

  const [stakeAmount, setStakeAmount] = useState("");
  const [error, setError] = useState<string | null>(null);
  const {  writeContractAsync: writeContract, isPending } = useWriteStakeContractStake({});
  const queryClient = useQueryClient();

  // Privy hooks
  const {ready, user, authenticated, login, connectWallet, logout} = usePrivy();
  const {wallets, ready: walletsReady} = useWallets();

  // WAGMI hooks
  const {address, isConnected, isConnecting, isDisconnected, connector} = useAccount();
  const {disconnect} = useDisconnect();
  const {setActiveWallet} = useSetActiveWallet();

  // Fetch SEED token balance
  const { data: seedBalance, queryKey: seedBalanceQueryKey } = useReadErc20BalanceOf({
    address: SEED_TOKEN_ADDRESS as `0x${string}`,
    args: [address as `0x${string}`],
  });

  // Fetch LEAF token balance
  const { data: leafBalance } = useReadErc20BalanceOf({
    address: LEAF_TOKEN_ADDRESS as `0x${string}`,
    args: [address as `0x${string}`],
  });

  // Add these new hooks
  const { data: seedAllowance, queryKey: seedAllowanceQueryKey } = useReadErc20Allowance({
    address: SEED_TOKEN_ADDRESS as `0x${string}`,
    args: [address as `0x${string}`, STAKING_CONTRACT_ADDRESS as `0x${string}`],
  });

  const { writeContractAsync: approveToken, isPending: isApproving,  } = useWriteErc20Approve({});

  if (!ready) {
    return null;
  }

  const handleConnectWallet = () => {
    if (authenticated) {
      connectWallet();
    } else {
      login();
    }
  };

  const handleDisconnect = () => {
    disconnect();
    logout();
  };

  // Helper function to format balance without decimals
  const formatBalanceWithoutDecimals = (balance: bigint | undefined) => {
    if (!balance) return '0';
    return Math.floor(parseFloat(formatEther(balance))).toString();
  };

  // Add this helper function near the top of your component
  const formatBalance = (balance: bigint | undefined) => {
    if (!balance) return '0';
    return formatEther(balance);
  };

  const handleStake = async () => {
    if (!stakeAmount || parseFloat(stakeAmount) <= 0) {
      setError("Please enter a valid amount to stake.");
      return;
    }
    
    const amountToStake = parseEther(stakeAmount);

    console.log("Seed Allowance:", seedAllowance);
    console.log("Amount to Stake:", amountToStake);

    // Check if allowance is sufficient
    if (!seedAllowance || seedAllowance < amountToStake) {
      try {
        console.log("Approving token...");
        const approveTx = await approveToken({
          address: SEED_TOKEN_ADDRESS as `0x${string}`,
          args: [STAKING_CONTRACT_ADDRESS as `0x${string}`, amountToStake]
        });
        console.log("Approval transaction sent");

        const receipt = await waitForTransactionReceipt(wagmiConfig, { hash: approveTx });
        console.log("Token approved successfully", receipt);
      } catch (error) {
        console.error("Approval failed:", error);
        setError("Failed to approve token spending. Please try again.");
        return;
      }
    }

    // Now proceed with staking
    try {
      console.log("Staking tokens...");
      const stakeTx = await writeContract({ args: [amountToStake] });
      console.log("Staking transaction sent:", stakeTx);
      
      // Wait for the transaction receipt
      const receipt = await waitForTransactionReceipt(wagmiConfig, { hash: stakeTx })
      console.log("Tokens staked successfully, receipt:", receipt);

      // Invalidate the balance and allowance queries
      queryClient.invalidateQueries({ queryKey: seedBalanceQueryKey });
      queryClient.invalidateQueries({ queryKey: seedAllowanceQueryKey });
      
      setStakeAmount(""); // Clear the input field after successful staking
      setError(null); // Clear any previous errors
    } catch (error) {
      console.error("Staking failed:", error);
      setError("Failed to stake. Please try again.");
    }
  };

  const handleMaxStake = () => {
    if (seedBalance) {
      setStakeAmount(formatEther(seedBalance));
    }
  };

  const handleRemoveAllowance = async () => {
    try {
      await approveToken({
        address: SEED_TOKEN_ADDRESS as `0x${string}`,
        args: [STAKING_CONTRACT_ADDRESS as `0x${string}`, BigInt(0)]
      });
      // Invalidate the allowance query to refresh the data
      queryClient.invalidateQueries({ queryKey: seedAllowanceQueryKey });
    } catch (error) {
      console.error("Failed to remove allowance:", error);
      setError("Failed to remove allowance. Please try again.");
    }
  };

  return (
    <div className="flex min-h-screen w-full flex-col bg-background text-foreground">
      <header className="sticky top-0 z-20 border-b bg-background px-4 py-3 sm:px-6">
        <div className="container mx-auto flex items-center justify-between">
          <Link href="#" className="flex items-center gap-2" prefetch={false}>
            <LeafIcon className="h-6 w-6 text-primary" />
            <span className="font-bold">SEED Staking</span>
          </Link>
          <div className="flex items-center gap-4">
            {isConnected ? (
              <>
                <span className="font-medium">{address && address.slice(0, 6)}...{address && address.slice(-4)}</span>
                <Button variant="outline" onClick={handleDisconnect}>Disconnect</Button>
              </>
            ) : (
              <Button variant="outline" onClick={handleConnectWallet}>Connect Wallet</Button>
            )}
          </div>
        </div>
      </header>
      <main className="flex-1 px-4 py-8 sm:px-6">
        {error && (
          <Alert variant="destructive" className="mb-4">
            <ExclamationTriangleIcon className="h-4 w-4" />
            <AlertTitle>Error</AlertTitle>
            <AlertDescription>{error}</AlertDescription>
          </Alert>
        )}
        <div className="container mx-auto grid max-w-4xl grid-cols-1 gap-8 md:grid-cols-2">
          <Card>
            <CardHeader>
              <CardTitle>Stake SEED</CardTitle>
              <CardDescription>Stake your SEED tokens to earn LEAF token rewards.</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="grid gap-4">
                <div className="grid gap-2">
                  <Label htmlFor="stake-amount">Amount to Stake</Label>
                  <div className="flex items-center gap-2">
                    <Input
                      id="stake-amount"
                      type="number"
                      placeholder="0"
                      min="0"
                      step="0.01"
                      className="flex-1"
                      value={stakeAmount}
                      onChange={(e) => setStakeAmount(e.target.value)}
                    />
                    <Button variant="outline" onClick={handleMaxStake}>MAX</Button>
                  </div>
                </div>
                <div className="text-sm">
                  Available SEED: {formatBalanceWithoutDecimals(seedBalance)} SEED
                  <br />
                  Allowed to stake: {formatBalance(seedAllowance)} SEED
                  {" "}
                  <span 
                    className="text-primary underline cursor-pointer" 
                    onClick={handleRemoveAllowance}
                  >
                    remove allowance
                  </span>
                </div>
                <Button
                  className="w-full"
                  onClick={handleStake}
                  disabled={isPending || isApproving || !stakeAmount || parseFloat(stakeAmount) <= 0}
                >
                  {isApproving ? "Approving..." : isPending ? "Staking..." : "Stake"}
                </Button>
              </div>
            </CardContent>
          </Card>
          <Card>
            <CardHeader>
              <CardTitle>Claim LEAF</CardTitle>
              <CardDescription>Claim your LEAF token rewards from staking SEED.</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="grid gap-4">
                <div className="grid gap-2">
                  <div className="flex items-center justify-between">
                    <span>Available LEAF Rewards</span>
                    <span className="font-medium">10 LEAF</span>
                  </div>
                  <div className="flex items-center justify-between">
                    <span>Total LEAF Balance</span>
                    <span className="font-medium">
                      {formatBalanceWithoutDecimals(leafBalance)} LEAF
                    </span>
                  </div>
                </div>
                <Button className="w-full">Claim Rewards</Button>
              </div>
            </CardContent>
          </Card>
          <Card className="md:col-span-2">
            <CardHeader>
              <CardTitle>My Staking</CardTitle>
              <CardDescription>View your staked SEED tokens and earned LEAF rewards.</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="grid gap-4">
                <div className="grid gap-2">
                  <div className="flex items-center justify-between">
                    <span>Staked SEED</span>
                    <span className="font-medium">100.00 SEED</span>
                  </div>
                  <div className="flex items-center justify-between">
                    <span>Available LEAF Rewards</span>
                    <span className="font-medium">10.25 LEAF</span>
                  </div>
                </div>
                <div className="grid gap-2">
                  <Button variant="outline" className="w-full">
                    Unstake SEED
                  </Button>
                  <Button className="w-full">Claim LEAF</Button>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>
      </main>
      <footer className="border-t bg-background px-4 py-4 sm:px-6">
        <div className="container mx-auto flex items-center justify-between">
          <p className="text-sm text-muted-foreground">&copy; 2024 SEED Staking. All rights reserved.</p>
          <div className="flex items-center gap-4">
            <Link href="#" className="text-sm hover:underline" prefetch={false}>
              Terms of Service
            </Link>
            <Link href="#" className="text-sm hover:underline" prefetch={false}>
              Privacy Policy
            </Link>
          </div>
        </div>
      </footer>
    </div>
  )
}

function LeafIcon(props: React.SVGProps<SVGSVGElement>) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M11 20A7 7 0 0 1 9.8 6.1C15.5 5 17 4.48 19 2c1 2 2 4.18 2 8 0 5.5-4.78 10-10 10Z" />
      <path d="M2 21c0-3 1.85-5.36 5.08-6C9.5 14.52 12 13 13 12" />
    </svg>
  )
}
